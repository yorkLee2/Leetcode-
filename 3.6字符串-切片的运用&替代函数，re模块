字符串的左旋转操作是把字符串前面的若干个字符转移到字符串的尾部。请定义一个函数实现字符串左旋转操作的功能。
比如，输入字符串"abcdefg"和数字2，该函数将返回左旋转两位得到的结果"cdefgab"。

示例 1：

输入: s = "abcdefg", k = 2
输出: "cdefgab"
示例 2：

输入: s = "lrloseumgh", k = 6
输出: "umghlrlose"

限制：
1 <= k < s.length <= 10000

#切片：
#切片使用2个冒号分隔的三个数字来完成
#切片适用于列表，元组，字符串，range对象等类型，
#应用于列表具有强大的功能。

#切片返回的是列表元素的浅复制，与列表对象的直接赋值不一样!！！！！
#Python采用基于值的内存管理模式；变量中并不直接存放值，而是存放值的引用
#切片操作不会因为下标越界而抛出异常，
#简单地在列表尾部截断或者返回一个空列表

class Solution:
    def reverseLeftWords(self, s: str, n: int) -> str:
        return s[n:]+s[0:n]


给你一个有效的 IPv4 地址 address，返回这个 IP 地址的无效化版本。
所谓无效化 IP 地址，其实就是用 "[.]" 代替了每个 "."。

#正则表达式：
     使用预定义的特定模式去匹配一类具有共同特征的字符串,主要用于字符串的处理--快速准确地完成复杂的查找，替换工作是用来匹配字符串的
字符串是完全匹配，前面是规则，后面是匹配字符串

#分析：1.replace函数,替代函数
      2.re模块：
        search(): 在整个字符串中查找，返回第一个匹配内容，如果找到返回match对象，没找到返回None
        match()： 从字符串的第一个字符开始匹配，如果找到返回match对象，没找到返回None
        findall()： 在字符串中匹配，如果成功返回match对象，如果失败返回None
          s=''apple,peach,banana,peach,pear''  #    s.find(''peach'')   >>6         s.index('p')  >>1

        finditer():  在字符串中匹配，如果成功返回match可迭代对象，如果失败返回None
        split():      按照匹配的字符串进行分割
        sub():      替换匹配的子字符串，返回替换之后的字符串

class Solution:
    def defangIPaddr(self, address: str) -> str:
    class Solution:
        raddress=address.replace('.','[.]')   #或者 return re.sub('\.','[.]',address)
        return raddress

平衡字符串：
在一个「平衡字符串」中，'L' 和 'R' 字符的数量是相同的。给出一个平衡字符串 s，请你将它分割成尽可能多的平衡字符串。
返回可以通过分割得到的平衡字符串的最大数量。
###此题表示不准确，可忽略不计


示例 1：
input：s = "RLRRLLRLRL"
output：4
解释：s 可以分割为 "RL", "RRLL", "RL", "RL", 每个子字符串中都包含相同数量的 'L' 和 'R'。
示例 2：

输入：s = "RLLLLRRRLR"
输出：3
解释：s 可以分割为 "RL", "LLLRRR", "LR", 每个子字符串中都包含相同数量的 'L' 和 'R'。
示例 3：

输入：s = "LLLLRRRR"
输出：1
解释：s 只能保持原样 "LLLLRRRR".

class Solution:
    def balancedStringSplit(self, s: str) -> int:
        """
        :type s: str
        :rtype: int
        """
        count = 0
        count_L = 0
        count_R = 0
        
        for s_ in s:
            if s_ == 'L':
                count_L += 1
            else:
                count_R += 1
            if count_L == count_R:
                count += 1
        return count


#################字符串
# a="Let's go "       print(a)
# print('hello'*20)   //重复输出字符串
# a='123'   b='abc'  c=a+b     print(c)   ##c=123abc
