1. 写重复代码是非常不好的低级行为
2. 你写的代码需要经常变更
其实 OOP 编程的主要作用也是使你的代码修改和扩展变的更容易，函数编程与 OOP 的主要区别就是 OOP 可以使程序更加容易扩展和易更改。
划分对象→抽象类→将类组织成为层次化结构(继承和合成) →用类与实例进行设计和实现几个阶段

Python：函数式+面向对象。纯面向对象的编程语言。对象由数据和行为两个部分组成。Python 中一切内容都可以成为对象，函数也是对象
数据成员和成员方法统称为类的对象
Python采用的基于值的内存管理模式，不直接存储值，而是存储值的引用，Python列表中元素也是存储值的引用。
解释型语言：边执行边翻译。   JAVA; C# 动态语言可以跨平台
编译型语言：一次性翻译再执行： c++;c;go 速度快

一.面向对象：
把构成事物的整个需求按照特点、功能划分，将这些存在共性的部分封装成对象，创建对象的目的不是为了完成某一个步骤，而是为了描述某个事物在整个解决问题的步骤中的行为。  
eg： 小明用美的洗衣机洗脏衣服，流程是怎样的？
1、可以先归纳出两个对象：“美的洗衣机”对象和“小明”对象
2、针对对象“美的洗衣机”加入一些它的方法：“自动注水方法”“洗衣方法”、“烘干方法”
3、针对对象“小明”加入他的方法：“加洗衣液方法”、“开启洗衣机方法”、“取出衣服方法”
4、然后执行，使用对象.动作 的方式，执行各步骤

二.类：
如果想通过面向对象编程，首先需要创建一个类(class)，才能实例化（或叫具象化）对象，类可以理解成一个模板，通过它可以创建出无数个具体实例（对象）。

通过继承，子类可以拥有父类所有的属性和方法；父类不具备子类自有的属性和方法；
class Animal:
  def eat(self):
       print( "%s 吃 " %self.name)
  def drink(self):
       print( "%s 喝 " %self.name)

class Cat(Animal):   # cat继承 Animal
 def __init__(self, name):
      self.name = name
      self.breed = '猫'
 def cry(self):
      print( '喵喵叫'  )

多态 :基类的同一个方法再不同派生类对象中具有不同的表现和行为
class WhoSay:
    def say(self,who):
        who.say()
class CLanguage:
    def say(self):
        print("调用的是 Clanguage 类的say方法")
class CPython(CLanguage):
    def say(self):
        print("调用的是 CPython 类的say方法")
class CLinux(CLanguage):
    def say(self):
        print("调用的是 CLinux 类的say方法")

a = WhoSay()
a.say(CLanguage()) # 调用 CLanguage 类的 say() 方法
a.say(CPython()) # 调用 CPython 类的 say() 方法
a.say(CLinux()) # 调用 CLinux 类的 say() 方法



