Write code to remove duplicates from an unsorted linked list.
Example1:
 Input: [1, 2, 3, 3, 2, 1]
 Output: [1, 2, 3]
 
Example2:
 Input: [1, 1, 1, 1, 2]
 Output: [1, 2]
 
和list比较，dict有以下几个特点：
查找和插入的速度极快，不会随着key的增加而增加；
需要占用大量的内存，内存浪费多。
而list相反：

查找和插入的时间随着元素的增加而增加；
占用空间小，浪费内存很少。
所以，dict是用空间来换取时间的一种方法。

dict可以用在需要高速查找的很多地方，在Python代码中几乎无处不在，正确使用dict非常重要，需要牢记的第一条就是dict的key必须是不可变对象。

这是因为dict根据key来计算value的存储位置，如果每次计算相同的key得出的结果不同，那dict内部就完全混乱了。这个通过key计算位置的算法称为哈希算法（Hash）。
#分析：运用set/dict哈希表的特点，包括set不带有重复值
#1.通过first指针循环遍历链表，直到first的值为Null
#2.在循环过程中，如果值不存在set中，加入set，pre指向对应first指针节点；
   如果存在，则指向下一个first的节点
   最终返回head
 class Solution:
    def removeDuplicateNodes(self, head: ListNode) -> ListNode:
        if not head or not head.next:
            return head            
        s = set()   
        first = head
        pre = head
        while first:         #通过first指针循环遍历链表，直到first的值为Null    
            if first.val in s:
                pre.next = first.next
            else:
                pre = first
                s.add(first.val)

            first = first.next   #通过first指针循环遍历链表，直到first的值为Null

        return head    
