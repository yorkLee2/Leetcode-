
#############################count,counter()方法
count() 方法用于统计某个元素在列表中出现的次数。
list.count(obj)

import collections
obj = collections.Counter('aabbccc')    print(obj)   ##输出：Counter({'c': 3, 'a': 2, 'b': 2})

import collections
obj = collections.Counter('aabbccc')
print(sorted(obj.elements()))

for k in obj.elements():   #遍历打印obj所有元素
    print(k)                                       ##输出  a b b c c c 

aList = [123, 'xyz', 'zara', 'abc', 123];
print "Count for 123 : ", aList.count(123);
print "Count for zara : ", aList.count('zara');

   T1.在二维平面上，有一个机器人从原点 (0, 0) 开始。给出它的移动顺序，判断这个机器人在完成移动后是否在 (0, 0) 处结束。移动顺序由字符串表示。字符 move[i] 表示其第 i 次移动。机器人的有效动作有 R（右），L（左），U（上）和 D（下）。
如果机器人在完成所有动作后返回原点，则返回 true。否则，返回 false。
注意：机器人“面朝”的方向无关紧要。 “R” 将始终使机器人向右移动一次，“L” 将始终向左移动等。
此外，假设每次移动机器人的移动幅度相同。


输入: "UD"     输出: true
输入: "LL"     输出: false
class Solution:
    def judgeCircle(self, moves: str) -> bool:
        return moves.count('L')==moves.count('R')and moves.count('U')==moves.count('D')
        

############################################filter()方法
def is_odd(n):
    return n % 2 == 1
 
newlist = filter(is_odd, [1, 2, 3, 4, 5, 6, 7, 8, 9, 10])   print(newlist)    //[1, 3, 5, 7, 9]   过滤得到奇数

import math
def is_sqr(x):
    return math.sqrt(x) % 1 == 0

newlist = filter(is_sqr, range(1, 101))
print(newlist)   //////[1, 4, 9, 16, 25, 36, 49, 64, 81, 100]


########################################isalpha()方法：
S = "runoob菜鸟"    print (S.isalpha())
 
S = "Runoob example....wow!!!"     print (S.isalpha())

##############################字典 items()方法
D = {'Google': 'www.google.com', 'Runoob': 'www.runoob.com', 'taobao': 'www.taobao.com'}
 
print("字典值 : %s" % D.items())
print("转换为列表 : %s" % list(D.items()))
 
# 遍历字典列表
for key, value in D.items():
    print(key, value)



###########################################################################
给定一个字符串，编写一个函数判定其是否为某个回文串的排列之一。
回文串是指正反两个方向都一样的单词或短语。排列是指字母的重新排列。
回文串不一定是字典当中的单词。

字典值 : D_items([('Google', 'www.google.com'), ('taobao', 'www.taobao.com'), ('Runoob', 'www.runoob.com')])
转换为列表 : [('Google', 'www.google.com'), ('taobao', 'www.taobao.com'), ('Runoob', 'www.runoob.com')]
Google www.google.com
taobao www.taobao.com
Runoob www.runoob.com


from collections import Counter
class Solution(object):
    def canPermutePalindrome(self, s):
        # 字符计数
        counter_s = Counter(list(s))

        # 统计其中奇数个数
        odd_count = 0
        for k, v in counter_s.items():
            if v%2 == 1:
                odd_count += 1

        # 奇数个数只能为1个或0个，对应abcba（c可以为1、3、5...等奇数个）、abba这种情况
        if odd_count>1:
            return False
        else:
            return True


if __name__ == '__main__':
    s = 'tactcoa'
    solution = Solution()
    print(solution.canPermutePalindrome(s))


给定一个非空字符串 s，最多删除一个字符。判断是否能成为回文字符串。
   输入: "aba"      输出: True
   输入: "abca"     输出: True        解释: 你可以删除c字符

分析：
python中判断回文数非常的容易，只需一条代码。【所谓的回文字符串，是指具有左右对称特点的字符串】   即：a[::-1] == a 这里a是一个字符串。
利用双指针进行判断，当存在首尾字符不相等的时候，试着删除首部或尾部一个字符再进行判断是否是回文数。 p1,p2, s[p]

class Solution(object):
    def validPalindrome(self, s):
        p1, p2 = 0, len(s) - 1
        while p1 < p2:
            if s[p1] != s[p2]:
                # 舍弃左字符
                a = s[p1 + 1: p2 + 1]
                # 舍弃右字符
                b = s[p1:p2]
                # 判断是否为回文字符串
                return a[::-1] == a or b[::-1] == b
            p1 += 1
            p2 -= 1
        return True

给定一个字符串，验证它是否是回文串，只考虑字母和数字字符，可以忽略字母的大小写。
   输入: "A man, a plan, a canal: Panama"    输出: true
   
   
给定一个字符串 S，返回 “反转后的” 字符串，其中不是字母的字符都保留在原地，而所有字母的位置发生反转。
class Solution:
    def reverseOnlyLetters(self, S: str) -> str:
        S = list(S)
        p1, p2 = 0, len(S) - 1
        while p1 < p2:
            if not S[p1].isalpha():
                p1 += 1    ##如果首部对应不是字母，p1++
            elif not S[p2].isalpha():
                p2 -= 1   ###如果尾部对应不是字母，p2-1
            else:       ####遇到字母，首部和尾部交换数据，指针向前或向后移动一位
                S[p1], S[p2] = S[p2], S[p1]
                p1 += 1
                p2 -= 1
        return "".join(S)


