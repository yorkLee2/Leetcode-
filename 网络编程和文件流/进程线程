进程:
正在执行中的应用程序，一个进程是一个执行中的文件使用资源的总和，属于动态概念，包括虚拟地址空间，代码，数据，对象句柄，环境变量，执行单元等。
多进程应该避免共享资源。
进程的出现让每个用户感觉到自己独享CPU，因此，进程就是为了在CPU上实现多道编程而提出的
多线程的主要作用：充分利用硬件资源，尤其是提高CPU利用率
进程间的数据交换使用Queue对象在进程间交换数据，一个进程把数据放入Queue对象，另一个进程从Queue对象中获取数据。

缺点：
1.进程只能在一个时间干一件事. 2.进程在执行的过程中如果阻塞，例如等待输入，整个进程就会挂起，即使进程中有些工作不依赖于输入的数据，也将无法执行。
如果把我们上课的过程看成一个进程的话，听老师讲课，记笔记，脑子还要思考问题。 上面这三件事将不能同时执行，同一时间只能做一件事.

from multiprocessing import Process, Queue
    multiprocessing包是Python中的多进程管理包。与threading.Thread类似，它可以利用multiprocessing.Process对象来创建一个进程。该进程可以运行在Python程序内部编写的函数。该Process对象与Thread对象的用法相同，也有start(), run(), join()的方法。
此外multiprocessing包中也有Lock/Event/Semaphore/Condition类 (这些对象可以像多线程那样，通过参数传递给各个进程)，用以同步进程，其用法与threading包中的同名类一致。
所以，multiprocessing的很大一部份与threading使用同一套API，只不过换到了多进程的情境。

线程 Threads: 上述进程缺点让我们引入线程这种机制。
解决的办法很简单，我们完全可以让听、写、思三个独立的过程，并行起来，这样很明显可以提高听课的效率。

线程调用的两种方法：
1.直接使用Thread类实例化一个线程对象并传递一个可调用对象作为参数
2.继承Tread类并在派生类重写__init__()和run()方法。
import threading
import time
　　

注意：
1>进程是资源分配的最小单位,线程是CPU调度的最小单位. 　　　　　
2>每一个进程中至少有一个线程。
3>同一时刻，只能有一个线程.当时考虑的只有一个单核处理器，Python默认加锁，防止数据出现问题
解决防范：多个进程；协程
