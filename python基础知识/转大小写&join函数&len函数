1.len 函数:
   len() 方法返回对象（字符、列表、元组等）长度或项目个数。

str = "runoob"
len(str)             # 字符串长度  6
l = [1,2,3,4,5]       len(l)               # 列表元素个数      5

2.join函数
. join()：    连接字符串数组。将字符串、元组、列表中的元素以指定的字符(分隔符)连接生成一个新的字符串
a=['1','2','3','4','5']     '  '.join(a)    1 2 3 4 5
                            '.'.join(a)     1.2.3.4.5 

3.append:
list.apend(obj) obj:添加到列表末尾的对象。
修改
            a[index] = "新的值"
            a[start:end] = [a,b,c]
            
            
给你一个字符串 s，它由数字（'0' - '9'）和 '#' 组成。我们希望按下述规则将 s 映射为一些小写英文字符：
字符（'a' - 'i'）分别用（'1' - '9'）表示。
字符（'j' - 'z'）分别用（'10#' - '26#'）表示。 
返回映射之后形成的新字符串。
题目数据保证映射始终唯一。

输入：s = "10#11#12"
输出："jkab"

输入：s = "1326#"
输出："acz"

输入：s = "25#"
输出："y"

class Solution:
    def freqAlphabets(self, s: str) -> str:
        m = {
            '10': 'j', '11': 'k', '12': 'l', '13': 'm', '14': 'n',
            '15': 'o', '16': 'p', '17': 'q', '18': 'r', '19': 's',
            '20': 't', '21': 'u', '22': 'v', '23': 'w', '24': 'x',
            '25': 'y', '26': 'z', '1': 'a', '2': 'b', '3': 'c',
            '4': 'd', '5': 'e', '6': 'f', '7': 'g', '8': 'h',
            '9': 'i',
        }     #####建立哈希表，映射关系
        ans = []
        i = len(s) - 1
        while i >= 0:
            if s[i] >= '1' and s[i] <= '9':
                ans.append(m[s[i]])    #a=[1,2,3]    a.append(5)   此时，运行结果为 [1, 2, 3, 5]
                i -= 1
            else:
                ans.append(m[s[i-2: i]])
                i -= 3
        ans.reverse()
        return ''.join(ans)

##
class Solution:
    def toLowerCase(self, str: str) -> str:
         return str.lower()
