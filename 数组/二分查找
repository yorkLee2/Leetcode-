################二分查找
1. 二分查找是有条件的，首先是有序，其次因为二分查找操作的是下标，所以要求是顺序表
2. 最优时间复杂度：O(1)
3. 最坏时间复杂度：O(logn)

1>首先，假设表中元素是按升序排列，将表中间位置记录的关键字与查找关键字比较，如果两者相等，则查找成功；
2>否则利用中间位置记录将表分成前、后两个子表，如果中间位置记录的关键字大于查找关键字，则进一步查找前一子表，否则进一步查找后一子表
3>重复以上过程，直到找到满足条件的记录，使查找成功，或直到子表不存在为止，此时查找不成功。


给定一个排序数组和一个目标值，在数组中找到目标值，并返回其索引。如果目标值不存在于数组中，返回它将会被按顺序插入的位置。
你可以假设数组中无重复元素。

Input: [1,3,5,6], 5       Output: 2
Input: [1,3,5,6], 2       Output: 1
Input: [1,3,5,6], 7       Output: 4
Input: [1,3,5,6], 0       Output: 0

class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        n= len(nums)
        # 特判
        if nums[n - 1] < target:
            return n

        left = 0
        right = n - 1
        while left < right:
            mid = left + (right - left) // 2       # 严格小于 target 的元素一定不是解
            if nums[mid] < target:      # 下一轮搜索区间是 [mid + 1, right]
                left = mid + 1
            else:
                right = mid
        return left
