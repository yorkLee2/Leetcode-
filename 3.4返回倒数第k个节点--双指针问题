实现一种算法，找出单向链表中倒数第 k 个节点。返回该节点的值。

输入： 1->2->3->4->5 和 k = 2
输出： 4

说明：
给定的 k 保证是有效的。

#分析：
#链表只有指针（包括head，tail）,值域（自定义结构/data）,单向next
#本题充分运用k保证是有效的
#双指针问题 

#运用链表顺序从开始计数
class Solution:
    def kthToLast(self, head: ListNode, k: int) -> int:
        fastpointer = head
        slowpointer = head    #定义两个指针，慢指针比快指针慢k个
        while(fastpointer!=None): 
            fastpointer=fastpointer.next
            if ( k==0):   
              slowpointer=slowpointer.next
            else: 
              k=k-1    #python不能写成k--?
        return slowpointer.val
        
实现一种算法，删除单向链表中间的某个节点（除了第一个和最后一个节点，不一定是中间节点），假定你只能访问该节点。
输入：单向链表a->b->c->d->e->f中的节点c
结果：不返回任何数据，但该链表变为a->b->d->e->f

#这题目有点毛病

 

