给你一个单链表的引用结点 head。链表中每个结点的值不是 0 就是 1。已知此链表是一个整数数字的二进制表示形式。
请你返回该链表所表示数字的 十进制值 

输入：head = [1,0,1]     输出：5
输入：head = [1,0,0,1,0,0,1,1,1,0,0,0,0,0,0]     输出：18880

tips:
  链表不为空。
  链表的结点总数不超过 30。
  每个结点的值不是 0 就是 1。

节点：每个节点有两个部分，左边部分称为值域，用来存放用户数据；右边部分称为指针域，用来存放指向下一个元素的指针。
head:head节点永远指向第一个节点
tail: tail永远指向最后一个节点
None:链表中最后一个节点的指针域为None值

#分析，沿着链表走，比如1110,0+1→1*2+1→3*2+1→4*2+0

递归
 
 
 class Solution:
    def getDecimalValue(self, head: ListNode) -> int:
        if not head or not head.next:
           return head  
        result=0
        while head:
          result=result*2+head.val    #head.val 指head此时指针指向对应的数据  head.value 
          head=head.next
        return result 
        
/////////////////////////////////////////////////////////////
删除链表中的结点

输入: head = [4,5,1,9], node = 5
输出: [4,1,9]
解释: 给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -> 1 -> 9.

输入: head = [4,5,1,9], node = 1
输出: [4,5,9]
解释: 给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -> 5 -> 9.

说明
链表至少包含两个节点。
链表中所有节点的值都是唯一的。
给定的节点为非末尾节点并且一定是链表中的一个有效节点。
不要从你的函数中返回任何结果。

#分析由于给定值唯一，只需要判断结点对应值是否相等，如果相等，删除不相等，输出
#题目没有给你头指针！！！！不能用head,无语了


class Solution:
  def deleteNode(self, node):
     node.val = node.next.val
     node.next = node.next.next


class Solution:
  def deleteNode(self, node):
     while head is not None and head.val==val:      
         head=head.next
     #if not head:         #判断链表是否为空
     #        return None
     Node=None        
     while head.next is not None:
            if head.next.val==val:
                head.next = head.next.next
            else:
                head=head.next
     return Node



        
        
