给定一个字符串，编写一个函数判定其是否为某个回文串的排列之一。
回文串是指正反两个方向都一样的单词或短语。排列是指字母的重新排列。
回文串不一定是字典当中的单词。

#############################counter()方法
import collections
obj = collections.Counter('aabbccc')    print(obj)   ##输出：Counter({'c': 3, 'a': 2, 'b': 2})

import collections
obj = collections.Counter('aabbccc')
print(sorted(obj.elements()))

for k in obj.elements():   #遍历打印obj所有元素
    print(k)                                       ##输出  a b b c c c 

##############################字典 items()方法
D = {'Google': 'www.google.com', 'Runoob': 'www.runoob.com', 'taobao': 'www.taobao.com'}
 
print("字典值 : %s" % D.items())
print("转换为列表 : %s" % list(D.items()))
 
# 遍历字典列表
for key, value in D.items():
    print(key, value)

字典值 : D_items([('Google', 'www.google.com'), ('taobao', 'www.taobao.com'), ('Runoob', 'www.runoob.com')])
转换为列表 : [('Google', 'www.google.com'), ('taobao', 'www.taobao.com'), ('Runoob', 'www.runoob.com')]
Google www.google.com
taobao www.taobao.com
Runoob www.runoob.com


from collections import Counter
class Solution(object):
    def canPermutePalindrome(self, s):
        # 字符计数
        counter_s = Counter(list(s))

        # 统计其中奇数个数
        odd_count = 0
        for k, v in counter_s.items():
            if v%2 == 1:
                odd_count += 1

        # 奇数个数只能为1个或0个，对应abcba（c可以为1、3、5...等奇数个）、abba这种情况
        if odd_count>1:
            return False
        else:
            return True


if __name__ == '__main__':
    s = 'tactcoa'
    solution = Solution()
    print(solution.canPermutePalindrome(s))



